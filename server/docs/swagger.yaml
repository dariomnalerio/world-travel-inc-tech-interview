basePath: /api/v1
definitions:
  errors.ErrorCode:
    enum:
    - invalid_email
    - failed_hash
    - email_already_exists
    - database_error
    - user_not_found
    - invalid_credentials
    - invalid_token
    - jwt_error
    type: string
    x-enum-varnames:
    - InvalidEmail
    - FailedHash
    - EmailAlreadyExists
    - DatabaseError
    - UserNotFound
    - InvalidCredentials
    - InvalidToken
    - JWTError
  models.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  models.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.LoginUserResponse:
    properties:
      token:
        type: string
    type: object
  utils.ErrorResponse:
    properties:
      code:
        $ref: '#/definitions/errors.ErrorCode'
      detail:
        description: Optional field for detailed error messages
        type: string
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for WTI-Tech-Interview
  title: WTI-Tech-Interview API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in an existing user with the provided email and password.
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Logs in an existing user.
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the provided email and password.
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Registers a new user.
      tags:
      - auth
  /health:
    get:
      description: Verifies that the server is running and healthy.
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Checks the health of the server.
      tags:
      - health
  /users:
    get:
      consumes:
      - application/json
      description: Retrieves a list of users.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - Bearer: []
      - BearerAuth: []
      summary: Retrieves a list of users.
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
